name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Load from .env or GitHub secrets
  DOCKER_IMAGE: fastapi-container/fastapi-app
  DB_IMAGE: postgres:13
  REDIS_IMAGE: redis:6

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      # Mirror your .env file variables
      FAST__DB__USER: ${{ vars.FAST__DB_USER || secrets.FAST__DB_USER || 'test_user' }}
      FAST__DB__PASSWORD: ${{ vars.FAST__DB_PASSWORD || secrets.FAST__DB_PASSWORD || 'test_password' }}
      FAST__DB__NAME: ${{ vars.FAST__DB_NAME || secrets.FAST__DB_NAME || 'test_db' }}
      FAST__DB__HOST: localhost
      FAST__DB__PORT: 5432
      
    services:
      postgres:
        image: ${{ env.DB_IMAGE }}
        env:
          POSTGRES_USER: ${{ env.FAST__DB__USER }}
          POSTGRES_PASSWORD: ${{ env.FAST__DB__PASSWORD }}
          POSTGRES_DB: ${{ env.FAST__DB__NAME }}
        # ... rest of postgres config

      redis:
        image: ${{ env.REDIS_IMAGE }}
        # ... rest of redis config

    steps:
    - uses: actions/checkout@v4
    
    # Add step to load .env file if it exists
    - name: Load environment variables
      uses: falti/load-env-vars@v1
      with:
        envFile: .env
    
    # ... rest of your steps
    - name: Run tests
      run: |
        pytest --cov=./ --cov-report=xml
        
  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        push: true
        tags: ${{ env.DOCKER_IMAGE }}:latest
        build-args: |
          ENVIRONMENT=production
        
    - name: Deploy to production
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          docker pull ${{ env.DOCKER_IMAGE }}:latest
          cd /path/to/your/app
          docker-compose down
          docker-compose pull
          docker-compose up -d